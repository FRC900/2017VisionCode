/*!
\mainpage 

Persistence1D is a class for finding local extrema and their persistence in one-dimensional data.
Local minima and local maxima are extracted, paired, and sorted according to their
persistence.

The code runs in O(n log n) time, where n is the number of input points.

Persistence1D has been written by Yeara Kozlov and <A HREF="http://www.mpi-inf.mpg.de/~weinkauf/">Tino Weinkauf</A>, Max Planck Institute for Informatics, Saarbrücken, Germany. You may use it as you wish, it is in the public domain.

\image html persistence1d_example_sine.png

	

##Getting Started
The code can be used in a C++ project by just including a header file,
or from within Matlab via mex.

Check out the <A HREF="examples.html">C++ examples and Matlab examples</A>.
There is also a little command line program persistence1d_driver.cpp to quickly process text files with data.

All relevant code (apart from examples and such)
is found in a single header file (persistence1d.hpp)
for simple inclusion in other projects.
The only dependency is the C++ standard library.
Everything is encapsulated into the namespace p1d.
The main class is p1d::Persistence1D.

A \link MatlabInterface detailed documentation of the Matlab interface\endlink is available.

For the sake of simplicity, only float data is supported,
but supporting other data types should be straight-forward.



## Input
- One-dimensional vector of float values. It is assumed that this represents the function values of a one-dimensional function.

## Output 
- Indices of minima and maxima points.
- List of all paired extrema and their persistence. 
- The global minimum is never paired and is returned separately. 

If desired, the output can be filtered by a persistence threshold
and adjusted to use the 1-indexing convention (e.g., for Matlab).
	
## Usage
### C++
The work flow with the class is as follows:
-# Create a data vector and an instance of the class p1d::Persistence1D. 
-# Call p1d::Persistence1D::RunPersistence() to run the main algorithm of the class.
-# Retrieve and filter results. The unfiltered results are saved in the class instance - 
	retrieving results for different threshold values is cheap. 
	Results can be retrieved using any of the following functions:
	- p1d::Persistence1D::GetPairedExtrema()  - Returns a vector containing all found pairs of 
						min-max pairs and their persistence.
						The global minimum is never paired. 
						Results can be filtered according to a threshold value 
						and their indices can be adjusted to Matlab's 1-indexing convention.
	- p1d::Persistence1D::GetExtremaIndices() - Returns two vectors with the indices of all found 
						minima and maxima pairs.
						Results can be filtered according to a threshold value 
						and their indices can be adjusted to Matlab's 1-indexing convention.
	- p1d::Persistence1D::GetGlobalMinimumIndex() - Returns the index of the global minimum. 
	- p1d::Persistence1D::GetGlobalMinimumValue() - Returns the value of the global minimum.

### Matlab
The work flow is similar to C++, with the only difference that the user gets a copy of 
all possible results and filtering is done Matlab-side. Index values 
are, of course, returned in Matlab 1-indexing convention.
-# Compile the Mex file.
-# Create some data vector.
-# Call [output arguments] = run_persistence1d(data) to run the main algorithm of the class
	and retrieve all possible output.
-# Filtering is done Matlab-side, either manually by logical indexing or using 
	the provided supporting Matlab functionalityy.

See the \link MatlabInterface documentation of the Matlab interface\endlink for more details.


## Some (actually not so peculiar) Peculiarities
Data values are ordered first according to their value,
and then according to their indices (if the data value is the same).
This has the following consequences:
- A plateau representing a minimum will have one local minimum point at its lowest index.
- A plateau representing a maximum will have one local maximum point at its highest index.
- If a maximum is between two minima with equal data values, 
it will be paired with the minimum to the right.


Note that due to our interpretation of the data, local maxima cannot appear at the domain edges.

# Reconstruct1D

\image html threshold_animation.gif

\image html data_weights_animation.gif

Reconstruct1D is an extension of Persistence1D, for reconstructing smooth functions based on persistent features in noisy data.

Reconstruct1D is written in Matlab and relies on Matlab's optimizers to reconstruct smooth functions which approximate the original data. 

It is recommended to use MOSEK optimizers. 

Check \link Reconstruct1d_Main Reconstruct1D documentation \endlink for detailed documentation and examples.

*/