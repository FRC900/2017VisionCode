<?xml version="1.0"?>
<!-- node to fuse odometry and IMU data into
	 one single filtered odometry message
-->

<launch>
	<!-- 
		Transform: x y z roll pitch yaw 
		Need 1 transform for each sensor source mapping
		from the base_link (fixed known point on the
		robot, for example, the center) to the location
		of each sensor
	-->
<!-- Maybe move these to the launch files which start up each sensor? -->

	<--node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_navx" args="0.1143 0.1143 0.0254 0 0 0 base_link navx_frame" />

	<--node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_zed" args="0.25 0 0 0 0 0 base_link zed_frame" />

	<!-- Assume wheel odometry is already transformed to base_link? -->

	<!-- Not sure about this - why would ZED position change
		 over time so use a fixed transform instead
		 <node name="zed_odom_transform" pkg="controller_node" type="transform_odom.py" output="screen" args="0 0 0 0 0 0 1 /zed_fuel/odom /zed_fuel/odom/filtered"/>
	-->

	<!-- not here? SLAM or amcl should be responsible for this -->
	<!--node pkg="tf2_ros" type="static_transform_publisher" name="map_to_odom" args="0.5 1.5 0 0 0 0 map odom" /-->

	<node name="ukf_localization_node" pkg="robot_localization" type="ukf_localization_node">
		<!-- 
			Change the frame parametrs when re-localization
			is implementated
			By default it looks like this node publishes 
			base_link <-> odom transform
		-->
		<param name="base_link_frame" value="base_link" />
		<param name="odom_frame" value="odom" />
		<param name="world_frame" value="odom" />

		<param name="two_d_mode" value="true" />
		<param name="imu0_remove_gravitational_acceleration" value="false" />

		<!-- We really need wheel encoder odometry -->
		<param name="odom0" value="/zed_fuel/odom/filtered" />
		<!--param name="odom1" value="/wheel_encoders/odom" /-->
		<param name="imu0" value="/navx/raw" />

		<!-- Figure these out ?
		<param name="odom0_differential" value="false" />
		<param name="odom0_relative" value="true" />

		<param name="odom0_differential" value="false" />
		<param name="odom0_relative" value="true" />

		<param name="imu0_differential" value="false"/>
		<param name="imu0_relative" value="true" />

		-->
		<param name="odom0_differential" value="true" />
		<!--
			Sensor Configuration:
			x, y, z
			roll, pitch, yaw
			x-velocity, y-velocity, z-velocity
			roll-velocity, pitch-velocity, yaw-velocity
			x-acceleration, y-acceleration, z-acceleration
		-->
		<!--
			The covariance matricies must be set correctly
			or the state estimation node will be confused as to the correct
			source of information
		-->
		<!-- odom0 (ZED Visual Odom): x, y, z, roll, pitch, yaw -->
		<!-- Think about whether we want Z, roll, pitch - the robot shouldn't
			 have significant net motion in those directions 
			 unless we are tipping over) and even so, do
			 we want to trust the navx data instead? -->
		<rosparam param="odom0_config"> [true,  true,  true,
                                         true,  true,  true,
                                         false, false, false,
                                         false, false, false,
                                         false, false, false]
        </rosparam>
		<!-- odom1 (Wheel encoder odometry): x, y pos + yaw velocity?
			 Could probably get acceleration from the raw
             data but does it matter if we feed consecutive
             velocity measurements to the UKF? -->
<!--
		<rosparam param="odom1_config"> [true , true , false,
                                         false, false, false,
                                         false, false, false,
                                         false, false, true ,
                                         false, false, false]
-->
        </rosparam>
		<!-- imu0 (NavX): roll, pitch, yaw, x-acc, y-acc, z-acc -->
		<!-- maybe add in r/p/y velocity? /-->
		<--rosparam param="imu0_config"> [false, false, false, 
										  true,  true,  true, 
										  false, false, false, 
										  false, false, false, 
										  true,  true,  true]
		</rosparam>
	</node>
</launch>
