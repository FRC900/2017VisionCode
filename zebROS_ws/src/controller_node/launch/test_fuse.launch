<?xml version="1.0"?>

<launch>
  <!-- 
  Slave Node Launcher
  # ZED Wrapper Instance
  # NavX
  # LIDAR
  # TF2 static transforms for ZED, NavX and LIDAR
  # Dummy odom->map identity transform as a placeholder until
  #    localization works
  # ukf node to fuse NavX, ZED and wheel encoder odometry
  # move_base
	-->
  <arg name="svo_file" default="" />
  <arg name="zed_id" default="0" />
  <arg name="brightness" default="-1" />
  <arg name="contrast" default="-1" />
  <arg name="hue" default="-1" />
  <arg name="saturation" default="-1" />
  <arg name="gain" default="-1" />
  <arg name="exposure" default="-1" />
  <arg name="whitebalance" default="-1" />
  <arg name="flip" default="false" />
  <arg name="disable_calibrate" default="false" />
  <arg name="publish_transform" default="false" />
  <arg name="name" default="zed_fuel" />
  <arg name="record" default="false" />
  
  <group ns="$(arg name)">
    <include file="$(find zed_wrapper)/launch/zed_camera.launch">
      <arg name="svo_file" value="$(arg svo_file)" />
      <arg name="zed_id" value="$(arg zed_id)" />
	  <arg name="zed_name" value="$(arg name)" />
      <arg name="brightness" value="$(arg brightness)" />
      <arg name="contrast" value="$(arg contrast)" />
      <arg name="hue" value="$(arg hue)" />
      <arg name="saturation" value="$(arg saturation)" />
      <arg name="gain" value="$(arg gain)" />
      <arg name="exposure" value="$(arg exposure)" />
      <arg name="whitebalance" value="$(arg whitebalance)" />
      <arg name="flip" value="$(arg flip)" />
      <arg name="disable_calibrate" value="$(arg disable_calibrate)" />
      <arg name="publish_transform" value="$(arg publish_transform)" />
    </include>
  </group>
  <include file="$(find controller_node)/launch/record_slave.launch" if="$(arg record)"/>
  
	<!-- 
		Transform: x y z roll pitch yaw 
		Need 1 transform for each sensor source mapping
		from the base_link (fixed known point on the
		robot, for example, the center) to the location
		of each sensor
	-->

  <!-- 
	    link position of camera on robot to base_link 
		Need two of these, both with same x,y,z r,p,y offset
		First one links the odom fixed starting point to 
		the fixed starting point of the camera's initial frame. Typically
		the fixed odom frame is where the base_link of the robot
		is when it starts up, so an offset is needed to account for
		where the camera is relative to the base link.
		The current camera frame is where the camera is now. Since 
		it is fixed to the robot, it is the same static distance away
		from base_link at all times.  
		The cameral frame is defined to be the center of the left
        camera lens.  There is a urdf file which defines the center
        of the camera (which is also the depth frame) as well as the
        right camera frame.
   -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="odom_to_zed_fuel_initial" args="0 0 0 0 0 0 odom $(arg name)_initial_frame" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_zed_fuel_current" args="0 0 0 0 0 0 base_link $(arg name)_current_frame" />

  <!-- TODO : check rotation of the NavX -->
  <node name="navx_publisher_node" pkg="navx_publisher" type="navx_publisher_node" respawn="true" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_navx" args="0 0 0.025 1.57 0 0 zed_fuel_center navx_frame" />

  <include file="$(find controller_node)/launch/fuse_odom.launch"/>

  <!-- This will eventually be handled by localization of some sort
	   but for now include a dummy transform so map and odom are 
       linked 
	-->
  <node pkg="tf2_ros" type="static_transform_publisher" name="dummy_odom_to_map" args="0 0 0 0 0 0 map odom" />

</launch>
